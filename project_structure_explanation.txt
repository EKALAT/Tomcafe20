==================================================
โครงสร้างและหน้าที่ของไฟล์ต่างๆ ในโปรเจค TomCafe20
==================================================

โปรเจค TomCafe20 เป็นเว็บแอปพลิเคชันร้านกาแฟที่สร้างด้วย Django Framework โดยมีโครงสร้างไฟล์และหน้าที่ดังนี้:

1. manage.py
--------------
- เป็นเครื่องมือบรรทัดคำสั่งที่ช่วยในการจัดการโปรเจค Django
- ใช้สำหรับรันคำสั่งต่างๆ เช่น runserver, makemigrations, migrate
- ตัวอย่างการใช้งาน: python manage.py runserver (เริ่มเซิร์ฟเวอร์)

2. cafe_project/ (โฟลเดอร์หลักของโปรเจค)
-----------------------------------------
- settings.py: ไฟล์ตั้งค่าหลักของโปรเจค กำหนดค่าต่างๆ เช่น ฐานข้อมูล, installed apps, middleware
- urls.py: ไฟล์กำหนด URL หลักของโปรเจค ทำหน้าที่เป็นตัวจัดการเส้นทาง (router) ไปยังแอปต่างๆ
- wsgi.py: ไฟล์สำหรับการเชื่อมต่อกับ Web Server Gateway Interface เมื่อนำไปใช้งานจริง
- asgi.py: ไฟล์สำหรับการเชื่อมต่อกับ Asynchronous Server Gateway Interface สำหรับแอปที่ต้องการความเร็วสูง

3. แอปต่างๆ (app)
-----------------
ในโปรเจคนี้มีแอปหลักๆ ดังนี้:
- menu: จัดการเมนูอาหารและเครื่องดื่ม
- orders: จัดการคำสั่งซื้อ
- tables: จัดการโต๊ะในร้าน
- customers: จัดการข้อมูลลูกค้า
- cart: จัดการตะกร้าสินค้า

แต่ละแอปจะมีไฟล์หลักๆ ดังนี้:

a) models.py
------------
- กำหนดโครงสร้างข้อมูลของแอป โดยใช้ Object-Relational Mapping (ORM)
- แต่ละคลาสใน models.py จะถูกแปลงเป็นตารางในฐานข้อมูล
- ตัวอย่าง:
  * menu/models.py: มีคลาส MenuItem เก็บข้อมูลชื่อ, ราคา, ประเภทของรายการอาหาร
  * orders/models.py: มีคลาส Order และ OrderItem เก็บข้อมูลการสั่งซื้อ
  * tables/models.py: มีคลาส Table เก็บข้อมูลโต๊ะในร้าน

b) views.py
-----------
- ทำหน้าที่เป็นตัวควบคุม (Controller) รับคำขอจากผู้ใช้และส่งการตอบกลับ
- จัดการตรรกะ (Logic) ของแอปพลิเคชัน
- ตัวอย่าง:
  * menu/views.py: แสดงรายการเมนูทั้งหมด
  * orders/views.py: จัดการการสร้าง, แสดง, และอัปเดตคำสั่งซื้อ
  * customers/views.py: จัดการการลงทะเบียนและการเข้าสู่ระบบของลูกค้า

c) urls.py
----------
- กำหนดเส้นทาง URL ของแต่ละแอป
- เชื่อมโยง URL กับฟังก์ชัน view ที่เกี่ยวข้อง
- ตัวอย่าง:
  * menu/urls.py: กำหนด URL สำหรับการแสดงเมนู
  * orders/urls.py: กำหนด URL สำหรับการสร้างและแสดงคำสั่งซื้อ
  * customers/urls.py: กำหนด URL สำหรับการลงทะเบียนและเข้าสู่ระบบ

d) admin.py
-----------
- ลงทะเบียนโมเดลเพื่อให้สามารถจัดการผ่านหน้า Django Admin ได้
- ปรับแต่งการแสดงผลในหน้า Admin
- ตัวอย่าง: admin.site.register(MenuItem) ลงทะเบียนโมเดล MenuItem ใน admin

e) apps.py
----------
- กำหนดการตั้งค่าของแอป
- สามารถกำหนดค่าพิเศษสำหรับแอปได้
- ตัวอย่าง: class MenuConfig(AppConfig): name = 'menu'

f) tests.py
-----------
- ไฟล์สำหรับเขียนการทดสอบ (Unit Tests)
- ใช้ทดสอบฟังก์ชันการทำงานของแอป
- ช่วยให้มั่นใจว่าโค้ดทำงานถูกต้องหลังการเปลี่ยนแปลง
- ตัวอย่าง: การทดสอบว่าสร้าง MenuItem ได้อย่างถูกต้อง

g) migrations/
--------------
- โฟลเดอร์เก็บไฟล์การเปลี่ยนแปลงโครงสร้างฐานข้อมูล
- สร้างขึ้นจากคำสั่ง makemigrations
- ใช้ติดตามการเปลี่ยนแปลงโครงสร้างฐานข้อมูลตามเวลา
- ตัวอย่าง: 0001_initial.py (การสร้างตารางเริ่มต้น), 0002_add_field.py (การเพิ่มฟิลด์)

h) templates/
-------------
- โฟลเดอร์เก็บไฟล์ HTML สำหรับแสดงผลหน้าเว็บ
- ใช้ Django Template Language (DTL) สำหรับการแสดงข้อมูลแบบไดนามิก
- ตัวอย่าง:
  * menu/templates/menu_list.html: แสดงรายการเมนูทั้งหมด
  * orders/templates/order_detail.html: แสดงรายละเอียดคำสั่งซื้อ
  * customers/templates/register_customer.html: แสดงฟอร์มลงทะเบียนลูกค้า

4. ไฟล์อื่นๆ
-----------
- requirements.txt: ไฟล์รายการแพ็คเกจที่ใช้ในโปรเจค
- .gitignore: กำหนดไฟล์ที่ไม่ต้องการให้ Git ติดตาม
- README.md: ไฟล์อธิบายโปรเจคและวิธีการติดตั้ง

5. การทำงานร่วมกันของไฟล์ต่างๆ
-----------------------------
- URLs: เมื่อผู้ใช้เข้าถึง URL จะถูกส่งไปยัง View ที่เกี่ยวข้อง
- Views: รับคำขอ ประมวลผลข้อมูลโดยใช้ Models และส่งข้อมูลไปแสดงผลที่ Templates
- Models: กำหนดโครงสร้างข้อมูลและจัดการการติดต่อกับฐานข้อมูล
- Templates: แสดงผลข้อมูลให้กับผู้ใช้ในรูปแบบ HTML

6. ตัวอย่างการทำงานของระบบ TomCafe20
-----------------------------------
1. ลูกค้าเข้าสู่ระบบผ่านหน้า customers/enter_name/
2. ลูกค้าดูเมนูผ่านหน้า menu/
3. ลูกค้าเพิ่มสินค้าลงตะกร้าผ่าน cart/add/
4. ลูกค้ายืนยันคำสั่งซื้อผ่าน orders/confirm/
5. พนักงานตรวจสอบคำสั่งซื้อผ่านหน้า admin 